name: Modern LLVM Build CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  CC: clang
  CXX: clang++

jobs:
  cmake-modern-builds:
    name: CMake Modern LLVM Builds
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: "Baseline"
            cmake_flags: ""
          - name: "LLD Linker"
            cmake_flags: "-DUSE_LLD=ON"
          - name: "ThinLTO"
            cmake_flags: "-DUSE_LTO=ON"
          - name: "LLD + ThinLTO"
            cmake_flags: "-DUSE_LLD=ON -DUSE_LTO=ON"
          - name: "LLD + ThinLTO + Polly"
            cmake_flags: "-DUSE_LLD=ON -DUSE_LTO=ON -DUSE_POLLY=ON"
          - name: "AddressSanitizer"
            cmake_flags: "-DENABLE_ASAN=ON"
          - name: "UndefinedBehaviorSanitizer"
            cmake_flags: "-DENABLE_UBSAN=ON"
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Install modern LLVM toolchain
        run: |
          set -euxo pipefail
          sudo apt-get update -y
          sudo apt-get install -y \
            build-essential \
            clang-18 \
            lld-18 \
            llvm-18 \
            llvm-18-dev \
            llvm-18-tools \
            ninja-build \
            cmake \
            python3-pip \
            bison \
            flex
          
          # Ensure clang-18 tools are available as default
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-18 100
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-18 100
          sudo update-alternatives --install /usr/bin/llvm-ar llvm-ar /usr/bin/llvm-ar-18 100
          sudo update-alternatives --install /usr/bin/ld.lld ld.lld /usr/bin/ld.lld-18 100
          
      - name: Install Python dependencies
        run: |
          python3 -m pip install --user meson ninja pytest
          
      - name: Verify modern toolchain
        run: |
          set -euxo pipefail
          clang --version
          llvm-ar --version
          ld.lld --version
          ninja --version
          cmake --version
          echo "=== LLVM Tools Check ==="
          which clang llvm-ar ld.lld ninja cmake
          
      - name: Configure CMake (${{ matrix.config.name }})
        run: |
          set -euxo pipefail
          cmake -S . -B build -G Ninja ${{ matrix.config.cmake_flags }}
          
      - name: Build (${{ matrix.config.name }})
        run: |
          set -euxo pipefail
          ninja -C build -j $(nproc)
          
      - name: Check build artifacts
        run: |
          set -euxo pipefail
          ls -la build/
          file build/kernel* || true
          
      - name: Build info for artifacts
        run: |
          set -euxo pipefail
          echo "=== Build Configuration ===" > build/build_info.txt
          echo "Config: ${{ matrix.config.name }}" >> build/build_info.txt
          echo "CMake flags: ${{ matrix.config.cmake_flags }}" >> build/build_info.txt
          echo "Compiler: $(clang --version | head -n1)" >> build/build_info.txt
          echo "Linker: $(ld.lld --version | head -n1)" >> build/build_info.txt
          echo "Build date: $(date)" >> build/build_info.txt
          cat build/build_info.txt
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cmake-${{ matrix.config.name }}-artifacts
          path: |
            build/kernel*
            build/build_info.txt
          retention-days: 7

  meson-modern-builds:
    name: Meson Modern LLVM Builds  
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: "Baseline"
            meson_flags: ""
          - name: "LLD Linker"
            meson_flags: "-Duse_lld=true"
          - name: "ThinLTO"
            meson_flags: "-Duse_lto=true"
          - name: "LLD + ThinLTO"
            meson_flags: "-Duse_lld=true -Duse_lto=true"
          - name: "LLD + ThinLTO + Polly"
            meson_flags: "-Duse_lld=true -Duse_lto=true -Duse_polly=true"
          - name: "AddressSanitizer"
            meson_flags: "-Denable_asan=true"
            
    steps:
      - uses: actions/checkout@v4
      
      - name: Install modern LLVM toolchain
        run: |
          set -euxo pipefail
          sudo apt-get update -y
          sudo apt-get install -y \
            build-essential \
            clang-18 \
            lld-18 \
            llvm-18 \
            llvm-18-dev \
            llvm-18-tools \
            ninja-build \
            cmake \
            python3-pip \
            bison \
            flex
            
          # Ensure clang-18 tools are available as default
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-18 100
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-18 100
          
      - name: Install Python dependencies
        run: |
          python3 -m pip install --user meson ninja pytest
          
      - name: Configure Meson (${{ matrix.config.name }})
        env:
          CC: clang
          CXX: clang++
        run: |
          set -euxo pipefail
          PATH="/home/runner/.local/bin:$PATH" meson setup build ${{ matrix.config.meson_flags }}
          
      - name: Build (${{ matrix.config.name }})
        run: |
          set -euxo pipefail
          PATH="/home/runner/.local/bin:$PATH" ninja -C build -j $(nproc)
          
      - name: Check build artifacts
        run: |
          set -euxo pipefail
          ls -la build/
          file build/kernel* || true
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: meson-${{ matrix.config.name }}-artifacts
          path: |
            build/kernel*
          retention-days: 7

  build-comparison:
    name: Build Comparison & Validation
    runs-on: ubuntu-latest
    needs: [cmake-modern-builds, meson-modern-builds]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          
      - name: Compare build systems
        run: |
          set -euxo pipefail
          echo "=== Build Artifacts Comparison ==="
          find artifacts/ -name "kernel*" -exec ls -la {} \;
          
          echo "=== CMake Build Info ==="
          find artifacts/ -name "build_info.txt" -exec cat {} \;
          
          echo "=== Summary ==="
          echo "Total CMake builds: $(find artifacts/ -name "cmake-*" -type d | wc -l)"
          echo "Total Meson builds: $(find artifacts/ -name "meson-*" -type d | wc -l)"
          
      - name: Validate modern features
        run: |
          set -euxo pipefail
          
          # Check that LTO builds exist and are different from baseline
          baseline_size=$(find artifacts/cmake-Baseline-artifacts -name "kernel*" -exec wc -c {} \; | awk '{print $1}' | head -n1)
          lto_size=$(find artifacts/cmake-LLD\ +\ ThinLTO-artifacts -name "kernel*" -exec wc -c {} \; | awk '{print $1}' | head -n1 || echo "0")
          
          echo "Baseline kernel size: $baseline_size bytes"
          echo "LTO kernel size: $lto_size bytes"
          
          if [ "$lto_size" -gt 0 ] && [ "$lto_size" -ne "$baseline_size" ]; then
            echo "✅ LTO build successful and differs from baseline"
          else
            echo "❌ LTO build validation failed"
            exit 1
          fi