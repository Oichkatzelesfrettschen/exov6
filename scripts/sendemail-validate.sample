#!/bin/sh

# An example hook script to validate a patch (and/or patch series) before
# sending it via email.
#
# The hook should exit with non-zero status after issuing an appropriate
# message if it wants to prevent the email(s) from being sent.
#
# To enable this hook, rename this file to "sendemail-validate".
#
# By default, it will only check that the patch(es) can be applied on top of
# the default upstream branch without conflicts in a secondary worktree. After
# validation (successful or not) of the last patch of a series, the worktree
# will be deleted.
#
# The following config variables can be set to change the default remote and
# remote ref that are used to apply the patches against:
#
#   sendemail.validateRemote (default: origin)
#   sendemail.validateRemoteRef (default: HEAD)
#
# Replace the TODO placeholders with appropriate checks according to your
# needs.

validate_cover_letter () {
        file="$1"
        # Basic spell check for the cover letter if aspell is available.
        if command -v aspell >/dev/null
        then
                # Report any misspelled words.
                if aspell list < "$file" | grep -q .
                then
                        echo "sendemail-validate: spelling errors in $file" >&2
                        return 1
                fi
        fi
        return 0
}

validate_patch () {
        file="$1"
        # Ensure that the patch applies without conflicts.
        git am -3 "$file" || return

        # Run checkpatch.pl if available.
        if command -v perl >/dev/null && [ -f scripts/checkpatch.pl ]
        then
                perl scripts/checkpatch.pl --no-tree "$file" || return
        fi
        return 0
}

validate_series () {
        # Build the tree to ensure patches compile.
        make -j"$(nproc)" >/dev/null || return
        return 0
}

# main -------------------------------------------------------------------------

if test "$GIT_SENDEMAIL_FILE_COUNTER" = 1
then
	remote=$(git config --default origin --get sendemail.validateRemote) &&
	ref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&
	worktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&
	git worktree add -fd --checkout "$worktree" "refs/remotes/$remote/$ref" &&
	git config --replace-all sendemail.validateWorktree "$worktree"
else
	worktree=$(git config --get sendemail.validateWorktree)
fi || {
	echo "sendemail-validate: error: failed to prepare worktree" >&2
	exit 1
}

unset GIT_DIR GIT_WORK_TREE
patchfile="$1"
case "$patchfile" in
    /*) ;;
    *) patchfile="$OLDPWD/$patchfile" ;;
esac
cd "$worktree" &&

if grep -q "^diff --git " "$patchfile"
then
        validate_patch "$patchfile"
else
        validate_cover_letter "$patchfile"
fi &&

if test "$GIT_SENDEMAIL_FILE_COUNTER" = "$GIT_SENDEMAIL_FILE_TOTAL"
then
	git config --unset-all sendemail.validateWorktree &&
	trap 'git worktree remove -ff "$worktree"' EXIT &&
	validate_series
fi
